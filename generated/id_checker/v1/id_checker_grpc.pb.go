// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: v1/id_checker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdCheckerServiceClient is the client API for IdCheckerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdCheckerServiceClient interface {
	CheckId(ctx context.Context, in *CheckIdRequest, opts ...grpc.CallOption) (*CheckIdResponse, error)
}

type idCheckerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdCheckerServiceClient(cc grpc.ClientConnInterface) IdCheckerServiceClient {
	return &idCheckerServiceClient{cc}
}

func (c *idCheckerServiceClient) CheckId(ctx context.Context, in *CheckIdRequest, opts ...grpc.CallOption) (*CheckIdResponse, error) {
	out := new(CheckIdResponse)
	err := c.cc.Invoke(ctx, "/id_checker.IdCheckerService/CheckId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdCheckerServiceServer is the server API for IdCheckerService service.
// All implementations must embed UnimplementedIdCheckerServiceServer
// for forward compatibility
type IdCheckerServiceServer interface {
	CheckId(context.Context, *CheckIdRequest) (*CheckIdResponse, error)
	mustEmbedUnimplementedIdCheckerServiceServer()
}

// UnimplementedIdCheckerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdCheckerServiceServer struct {
}

func (UnimplementedIdCheckerServiceServer) CheckId(context.Context, *CheckIdRequest) (*CheckIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckId not implemented")
}
func (UnimplementedIdCheckerServiceServer) mustEmbedUnimplementedIdCheckerServiceServer() {}

// UnsafeIdCheckerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdCheckerServiceServer will
// result in compilation errors.
type UnsafeIdCheckerServiceServer interface {
	mustEmbedUnimplementedIdCheckerServiceServer()
}

func RegisterIdCheckerServiceServer(s grpc.ServiceRegistrar, srv IdCheckerServiceServer) {
	s.RegisterService(&IdCheckerService_ServiceDesc, srv)
}

func _IdCheckerService_CheckId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdCheckerServiceServer).CheckId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_checker.IdCheckerService/CheckId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdCheckerServiceServer).CheckId(ctx, req.(*CheckIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdCheckerService_ServiceDesc is the grpc.ServiceDesc for IdCheckerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdCheckerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "id_checker.IdCheckerService",
	HandlerType: (*IdCheckerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckId",
			Handler:    _IdCheckerService_CheckId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/id_checker.proto",
}
